plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    compileSdkVersion defaultCompileSdkVersion

    defaultConfig {
        applicationId "com.ortiz.touchdemo"
        versionCode getGitCommitCount()
        versionName getTag()

        minSdkVersion 21 // because of testLib Moka
        targetSdkVersion defaultTargetSdkVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    buildFeatures {
        viewBinding true
    }
    namespace 'info.touchimage.demo'

}

dependencies {
    implementation project(':touchview')
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation "androidx.viewpager2:viewpager2:1.0.0"
    implementation 'com.github.bumptech.glide:glide:4.14.2'

    androidTestImplementation 'com.github.AppDevNext:Moka:1.6'
    androidTestImplementation "androidx.test.ext:junit:1.1.4"
    androidTestImplementation 'androidx.test:runner:1.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.5.0'
}

def adbDirectory = '/storage/emulated/0/Download' // api 28
//def adbDirectory = '/storage/self/primary/Download' // api 21
def reportsDirectory = "$projectDir/../screenshots/adb"

def clearScreenshotsTask = task('clearScreenshots', type: Exec) {
    println "clearScreenshotsTask"
    executable "${android.getAdbExe().toString()}"
    args 'shell', 'rm', '-r', adbDirectory
}

def createScreenshotDirectoryTask = task('createScreenshotDirectory', type: Exec, group: 'reporting') {
    println "createScreenshotDirectoryTask"
    executable "${android.getAdbExe().toString()}"
    args 'shell', 'mkdir', '-p', adbDirectory
}

def fetchScreenshotsTask = task('fetchScreenshots', type: Exec, group: 'reporting') {
    println "fetchScreenshotsTask"
    executable "${android.getAdbExe().toString()}"
    args 'pull', adbDirectory + '/.', reportsDirectory

    dependsOn {
        createScreenshotDirectoryTask
    }

    doFirst {
        new File(reportsDirectory).mkdirs()
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'connectedDebugAndroidTest') {
        task.mustRunAfter {
            clearScreenshotsTask
            createScreenshotDirectoryTask
        }
        task.finalizedBy {
            fetchScreenshotsTask
        }
    }
}
